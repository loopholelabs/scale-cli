/*
 * Copyright 2022 Loophole Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAuthCallbackGithub(params *GetAuthCallbackGithubParams, opts ...ClientOption) error

	GetAuthGithub(params *GetAuthGithubParams, opts ...ClientOption) (*GetAuthGithubOK, error)

	GetAuthGithubDevice(params *GetAuthGithubDeviceParams, opts ...ClientOption) error

	PostAuthRefresh(params *PostAuthRefreshParams, opts ...ClientOption) (*PostAuthRefreshOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAuthCallbackGithub githubs callback

Github Callback
*/
func (a *Client) GetAuthCallbackGithub(params *GetAuthCallbackGithubParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthCallbackGithubParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthCallbackGithub",
		Method:             "GET",
		PathPattern:        "/auth/callback/github",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthCallbackGithubReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAuthGithub logins with github

Login with Github
*/
func (a *Client) GetAuthGithub(params *GetAuthGithubParams, opts ...ClientOption) (*GetAuthGithubOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthGithubParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthGithub",
		Method:             "GET",
		PathPattern:        "/auth/github",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthGithubReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthGithubOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthGithub: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthGithubDevice retrieves the github o auth URL using a device code

Retrieve the Github OAuth URL Using a Device Code
*/
func (a *Client) GetAuthGithubDevice(params *GetAuthGithubDeviceParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthGithubDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthGithubDevice",
		Method:             "GET",
		PathPattern:        "/auth/github/device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthGithubDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
PostAuthRefresh exchanges a refresh token

Exchange a Refresh Token
*/
func (a *Client) PostAuthRefresh(params *PostAuthRefreshParams, opts ...ClientOption) (*PostAuthRefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthRefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAuthRefresh",
		Method:             "POST",
		PathPattern:        "/auth/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthRefreshReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthRefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuthRefresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
