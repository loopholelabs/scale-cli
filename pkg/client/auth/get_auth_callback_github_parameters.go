/*
 * Copyright 2022 Loophole Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAuthCallbackGithubParams creates a new GetAuthCallbackGithubParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuthCallbackGithubParams() *GetAuthCallbackGithubParams {
	return &GetAuthCallbackGithubParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuthCallbackGithubParamsWithTimeout creates a new GetAuthCallbackGithubParams object
// with the ability to set a timeout on a request.
func NewGetAuthCallbackGithubParamsWithTimeout(timeout time.Duration) *GetAuthCallbackGithubParams {
	return &GetAuthCallbackGithubParams{
		timeout: timeout,
	}
}

// NewGetAuthCallbackGithubParamsWithContext creates a new GetAuthCallbackGithubParams object
// with the ability to set a context for a request.
func NewGetAuthCallbackGithubParamsWithContext(ctx context.Context) *GetAuthCallbackGithubParams {
	return &GetAuthCallbackGithubParams{
		Context: ctx,
	}
}

// NewGetAuthCallbackGithubParamsWithHTTPClient creates a new GetAuthCallbackGithubParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuthCallbackGithubParamsWithHTTPClient(client *http.Client) *GetAuthCallbackGithubParams {
	return &GetAuthCallbackGithubParams{
		HTTPClient: client,
	}
}

/*
GetAuthCallbackGithubParams contains all the parameters to send to the API endpoint

	for the get auth callback github operation.

	Typically these are written to a http.Request.
*/
type GetAuthCallbackGithubParams struct {

	/* Code.

	   code
	*/
	Code string

	/* State.

	   state
	*/
	State string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get auth callback github params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuthCallbackGithubParams) WithDefaults() *GetAuthCallbackGithubParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get auth callback github params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuthCallbackGithubParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get auth callback github params
func (o *GetAuthCallbackGithubParams) WithTimeout(timeout time.Duration) *GetAuthCallbackGithubParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get auth callback github params
func (o *GetAuthCallbackGithubParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get auth callback github params
func (o *GetAuthCallbackGithubParams) WithContext(ctx context.Context) *GetAuthCallbackGithubParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get auth callback github params
func (o *GetAuthCallbackGithubParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get auth callback github params
func (o *GetAuthCallbackGithubParams) WithHTTPClient(client *http.Client) *GetAuthCallbackGithubParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get auth callback github params
func (o *GetAuthCallbackGithubParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the get auth callback github params
func (o *GetAuthCallbackGithubParams) WithCode(code string) *GetAuthCallbackGithubParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the get auth callback github params
func (o *GetAuthCallbackGithubParams) SetCode(code string) {
	o.Code = code
}

// WithState adds the state to the get auth callback github params
func (o *GetAuthCallbackGithubParams) WithState(state string) *GetAuthCallbackGithubParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get auth callback github params
func (o *GetAuthCallbackGithubParams) SetState(state string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuthCallbackGithubParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param code
	qrCode := o.Code
	qCode := qrCode
	if qCode != "" {

		if err := r.SetQueryParam("code", qCode); err != nil {
			return err
		}
	}

	// query param state
	qrState := o.State
	qState := qrState
	if qState != "" {

		if err := r.SetQueryParam("state", qState); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
