// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/scale-cli/pkg/client/models"
)

// GetRegistrySignatureNamespaceNameVersionReader is a Reader for the GetRegistrySignatureNamespaceNameVersion structure.
type GetRegistrySignatureNamespaceNameVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRegistrySignatureNamespaceNameVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRegistrySignatureNamespaceNameVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRegistrySignatureNamespaceNameVersionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRegistrySignatureNamespaceNameVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRegistrySignatureNamespaceNameVersionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRegistrySignatureNamespaceNameVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRegistrySignatureNamespaceNameVersionOK creates a GetRegistrySignatureNamespaceNameVersionOK with default headers values
func NewGetRegistrySignatureNamespaceNameVersionOK() *GetRegistrySignatureNamespaceNameVersionOK {
	return &GetRegistrySignatureNamespaceNameVersionOK{}
}

/*
	GetRegistrySignatureNamespaceNameVersionOK describes a response with status code 200, with default header values.

OK
*/
type GetRegistrySignatureNamespaceNameVersionOK struct {
	Payload *models.ModelsGetSignatureResponse
}

// IsSuccess returns true when this get registry signature namespace name version o k response has a 2xx status code
func (o *GetRegistrySignatureNamespaceNameVersionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get registry signature namespace name version o k response has a 3xx status code
func (o *GetRegistrySignatureNamespaceNameVersionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get registry signature namespace name version o k response has a 4xx status code
func (o *GetRegistrySignatureNamespaceNameVersionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get registry signature namespace name version o k response has a 5xx status code
func (o *GetRegistrySignatureNamespaceNameVersionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get registry signature namespace name version o k response a status code equal to that given
func (o *GetRegistrySignatureNamespaceNameVersionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRegistrySignatureNamespaceNameVersionOK) Error() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionOK  %+v", 200, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionOK) String() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionOK  %+v", 200, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionOK) GetPayload() *models.ModelsGetSignatureResponse {
	return o.Payload
}

func (o *GetRegistrySignatureNamespaceNameVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsGetSignatureResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegistrySignatureNamespaceNameVersionBadRequest creates a GetRegistrySignatureNamespaceNameVersionBadRequest with default headers values
func NewGetRegistrySignatureNamespaceNameVersionBadRequest() *GetRegistrySignatureNamespaceNameVersionBadRequest {
	return &GetRegistrySignatureNamespaceNameVersionBadRequest{}
}

/*
	GetRegistrySignatureNamespaceNameVersionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRegistrySignatureNamespaceNameVersionBadRequest struct {
	Payload string
}

// IsSuccess returns true when this get registry signature namespace name version bad request response has a 2xx status code
func (o *GetRegistrySignatureNamespaceNameVersionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get registry signature namespace name version bad request response has a 3xx status code
func (o *GetRegistrySignatureNamespaceNameVersionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get registry signature namespace name version bad request response has a 4xx status code
func (o *GetRegistrySignatureNamespaceNameVersionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get registry signature namespace name version bad request response has a 5xx status code
func (o *GetRegistrySignatureNamespaceNameVersionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get registry signature namespace name version bad request response a status code equal to that given
func (o *GetRegistrySignatureNamespaceNameVersionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetRegistrySignatureNamespaceNameVersionBadRequest) Error() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionBadRequest) String() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionBadRequest  %+v", 400, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GetRegistrySignatureNamespaceNameVersionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegistrySignatureNamespaceNameVersionUnauthorized creates a GetRegistrySignatureNamespaceNameVersionUnauthorized with default headers values
func NewGetRegistrySignatureNamespaceNameVersionUnauthorized() *GetRegistrySignatureNamespaceNameVersionUnauthorized {
	return &GetRegistrySignatureNamespaceNameVersionUnauthorized{}
}

/*
	GetRegistrySignatureNamespaceNameVersionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRegistrySignatureNamespaceNameVersionUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this get registry signature namespace name version unauthorized response has a 2xx status code
func (o *GetRegistrySignatureNamespaceNameVersionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get registry signature namespace name version unauthorized response has a 3xx status code
func (o *GetRegistrySignatureNamespaceNameVersionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get registry signature namespace name version unauthorized response has a 4xx status code
func (o *GetRegistrySignatureNamespaceNameVersionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get registry signature namespace name version unauthorized response has a 5xx status code
func (o *GetRegistrySignatureNamespaceNameVersionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get registry signature namespace name version unauthorized response a status code equal to that given
func (o *GetRegistrySignatureNamespaceNameVersionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRegistrySignatureNamespaceNameVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionUnauthorized) String() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *GetRegistrySignatureNamespaceNameVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegistrySignatureNamespaceNameVersionNotFound creates a GetRegistrySignatureNamespaceNameVersionNotFound with default headers values
func NewGetRegistrySignatureNamespaceNameVersionNotFound() *GetRegistrySignatureNamespaceNameVersionNotFound {
	return &GetRegistrySignatureNamespaceNameVersionNotFound{}
}

/*
	GetRegistrySignatureNamespaceNameVersionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRegistrySignatureNamespaceNameVersionNotFound struct {
	Payload string
}

// IsSuccess returns true when this get registry signature namespace name version not found response has a 2xx status code
func (o *GetRegistrySignatureNamespaceNameVersionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get registry signature namespace name version not found response has a 3xx status code
func (o *GetRegistrySignatureNamespaceNameVersionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get registry signature namespace name version not found response has a 4xx status code
func (o *GetRegistrySignatureNamespaceNameVersionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get registry signature namespace name version not found response has a 5xx status code
func (o *GetRegistrySignatureNamespaceNameVersionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get registry signature namespace name version not found response a status code equal to that given
func (o *GetRegistrySignatureNamespaceNameVersionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRegistrySignatureNamespaceNameVersionNotFound) Error() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionNotFound) String() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionNotFound  %+v", 404, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionNotFound) GetPayload() string {
	return o.Payload
}

func (o *GetRegistrySignatureNamespaceNameVersionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegistrySignatureNamespaceNameVersionInternalServerError creates a GetRegistrySignatureNamespaceNameVersionInternalServerError with default headers values
func NewGetRegistrySignatureNamespaceNameVersionInternalServerError() *GetRegistrySignatureNamespaceNameVersionInternalServerError {
	return &GetRegistrySignatureNamespaceNameVersionInternalServerError{}
}

/*
	GetRegistrySignatureNamespaceNameVersionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRegistrySignatureNamespaceNameVersionInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this get registry signature namespace name version internal server error response has a 2xx status code
func (o *GetRegistrySignatureNamespaceNameVersionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get registry signature namespace name version internal server error response has a 3xx status code
func (o *GetRegistrySignatureNamespaceNameVersionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get registry signature namespace name version internal server error response has a 4xx status code
func (o *GetRegistrySignatureNamespaceNameVersionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get registry signature namespace name version internal server error response has a 5xx status code
func (o *GetRegistrySignatureNamespaceNameVersionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get registry signature namespace name version internal server error response a status code equal to that given
func (o *GetRegistrySignatureNamespaceNameVersionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRegistrySignatureNamespaceNameVersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionInternalServerError) String() string {
	return fmt.Sprintf("[GET /registry/signature/{namespace}/{name}/{version}][%d] getRegistrySignatureNamespaceNameVersionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRegistrySignatureNamespaceNameVersionInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetRegistrySignatureNamespaceNameVersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
