/*
 	Copyright 2023 Loophole Labs

 	Licensed under the Apache License, Version 2.0 (the "License");
 	you may not use this file except in compliance with the License.
 	You may obtain a copy of the License at

 		   http://www.apache.org/licenses/LICENSE-2.0

 	Unless required by applicable law or agreed to in writing, software
 	distributed under the License is distributed on an "AS IS" BASIS,
 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 	See the License for the specific language governing permissions and
 	limitations under the License.
*/

// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/loopholelabs/scale-cli/client/models"
)

// GetAccessInviteReader is a Reader for the GetAccessInvite structure.
type GetAccessInviteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccessInviteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccessInviteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAccessInviteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAccessInviteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /access/invite] GetAccessInvite", response, response.Code())
	}
}

// NewGetAccessInviteOK creates a GetAccessInviteOK with default headers values
func NewGetAccessInviteOK() *GetAccessInviteOK {
	return &GetAccessInviteOK{}
}

/*
GetAccessInviteOK describes a response with status code 200, with default header values.

OK
*/
type GetAccessInviteOK struct {
	Payload []*models.ModelsOrganizationInviteResponse
}

// IsSuccess returns true when this get access invite o k response has a 2xx status code
func (o *GetAccessInviteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get access invite o k response has a 3xx status code
func (o *GetAccessInviteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access invite o k response has a 4xx status code
func (o *GetAccessInviteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get access invite o k response has a 5xx status code
func (o *GetAccessInviteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get access invite o k response a status code equal to that given
func (o *GetAccessInviteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get access invite o k response
func (o *GetAccessInviteOK) Code() int {
	return 200
}

func (o *GetAccessInviteOK) Error() string {
	return fmt.Sprintf("[GET /access/invite][%d] getAccessInviteOK  %+v", 200, o.Payload)
}

func (o *GetAccessInviteOK) String() string {
	return fmt.Sprintf("[GET /access/invite][%d] getAccessInviteOK  %+v", 200, o.Payload)
}

func (o *GetAccessInviteOK) GetPayload() []*models.ModelsOrganizationInviteResponse {
	return o.Payload
}

func (o *GetAccessInviteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessInviteUnauthorized creates a GetAccessInviteUnauthorized with default headers values
func NewGetAccessInviteUnauthorized() *GetAccessInviteUnauthorized {
	return &GetAccessInviteUnauthorized{}
}

/*
GetAccessInviteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAccessInviteUnauthorized struct {
	Payload string
}

// IsSuccess returns true when this get access invite unauthorized response has a 2xx status code
func (o *GetAccessInviteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access invite unauthorized response has a 3xx status code
func (o *GetAccessInviteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access invite unauthorized response has a 4xx status code
func (o *GetAccessInviteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access invite unauthorized response has a 5xx status code
func (o *GetAccessInviteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get access invite unauthorized response a status code equal to that given
func (o *GetAccessInviteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get access invite unauthorized response
func (o *GetAccessInviteUnauthorized) Code() int {
	return 401
}

func (o *GetAccessInviteUnauthorized) Error() string {
	return fmt.Sprintf("[GET /access/invite][%d] getAccessInviteUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAccessInviteUnauthorized) String() string {
	return fmt.Sprintf("[GET /access/invite][%d] getAccessInviteUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAccessInviteUnauthorized) GetPayload() string {
	return o.Payload
}

func (o *GetAccessInviteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessInviteInternalServerError creates a GetAccessInviteInternalServerError with default headers values
func NewGetAccessInviteInternalServerError() *GetAccessInviteInternalServerError {
	return &GetAccessInviteInternalServerError{}
}

/*
GetAccessInviteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAccessInviteInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this get access invite internal server error response has a 2xx status code
func (o *GetAccessInviteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access invite internal server error response has a 3xx status code
func (o *GetAccessInviteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access invite internal server error response has a 4xx status code
func (o *GetAccessInviteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get access invite internal server error response has a 5xx status code
func (o *GetAccessInviteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get access invite internal server error response a status code equal to that given
func (o *GetAccessInviteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get access invite internal server error response
func (o *GetAccessInviteInternalServerError) Code() int {
	return 500
}

func (o *GetAccessInviteInternalServerError) Error() string {
	return fmt.Sprintf("[GET /access/invite][%d] getAccessInviteInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAccessInviteInternalServerError) String() string {
	return fmt.Sprintf("[GET /access/invite][%d] getAccessInviteInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAccessInviteInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *GetAccessInviteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
