/*
 	Copyright 2023 Loophole Labs

 	Licensed under the Apache License, Version 2.0 (the "License");
 	you may not use this file except in compliance with the License.
 	You may obtain a copy of the License at

 		   http://www.apache.org/licenses/LICENSE-2.0

 	Unless required by applicable law or agreed to in writing, software
 	distributed under the License is distributed on an "AS IS" BASIS,
 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 	See the License for the specific language governing permissions and
 	limitations under the License.
*/

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ModelsCreateDeploymentRequest models create deployment request
//
// swagger:model models.CreateDeploymentRequest
type ModelsCreateDeploymentRequest struct {

	// functions
	Functions []*ModelsDeploymentFunction `json:"functions"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this models create deployment request
func (m *ModelsCreateDeploymentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunctions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsCreateDeploymentRequest) validateFunctions(formats strfmt.Registry) error {
	if swag.IsZero(m.Functions) { // not required
		return nil
	}

	for i := 0; i < len(m.Functions); i++ {
		if swag.IsZero(m.Functions[i]) { // not required
			continue
		}

		if m.Functions[i] != nil {
			if err := m.Functions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("functions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("functions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this models create deployment request based on the context it is used
func (m *ModelsCreateDeploymentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFunctions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelsCreateDeploymentRequest) contextValidateFunctions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Functions); i++ {

		if m.Functions[i] != nil {

			if swag.IsZero(m.Functions[i]) { // not required
				return nil
			}

			if err := m.Functions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("functions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("functions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelsCreateDeploymentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelsCreateDeploymentRequest) UnmarshalBinary(b []byte) error {
	var res ModelsCreateDeploymentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
