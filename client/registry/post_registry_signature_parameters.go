/*
 	Copyright 2023 Loophole Labs

 	Licensed under the Apache License, Version 2.0 (the "License");
 	you may not use this file except in compliance with the License.
 	You may obtain a copy of the License at

 		   http://www.apache.org/licenses/LICENSE-2.0

 	Unless required by applicable law or agreed to in writing, software
 	distributed under the License is distributed on an "AS IS" BASIS,
 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 	See the License for the specific language governing permissions and
 	limitations under the License.
*/

// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostRegistrySignatureParams creates a new PostRegistrySignatureParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostRegistrySignatureParams() *PostRegistrySignatureParams {
	return &PostRegistrySignatureParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostRegistrySignatureParamsWithTimeout creates a new PostRegistrySignatureParams object
// with the ability to set a timeout on a request.
func NewPostRegistrySignatureParamsWithTimeout(timeout time.Duration) *PostRegistrySignatureParams {
	return &PostRegistrySignatureParams{
		timeout: timeout,
	}
}

// NewPostRegistrySignatureParamsWithContext creates a new PostRegistrySignatureParams object
// with the ability to set a context for a request.
func NewPostRegistrySignatureParamsWithContext(ctx context.Context) *PostRegistrySignatureParams {
	return &PostRegistrySignatureParams{
		Context: ctx,
	}
}

// NewPostRegistrySignatureParamsWithHTTPClient creates a new PostRegistrySignatureParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostRegistrySignatureParamsWithHTTPClient(client *http.Client) *PostRegistrySignatureParams {
	return &PostRegistrySignatureParams{
		HTTPClient: client,
	}
}

/*
PostRegistrySignatureParams contains all the parameters to send to the API endpoint

	for the post registry signature operation.

	Typically these are written to a http.Request.
*/
type PostRegistrySignatureParams struct {

	/* Name.

	   name
	*/
	Name string

	/* Public.

	   public
	*/
	Public *bool

	/* Signature.

	   signature
	*/
	Signature runtime.NamedReadCloser

	/* Tag.

	   tag
	*/
	Tag string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post registry signature params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostRegistrySignatureParams) WithDefaults() *PostRegistrySignatureParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post registry signature params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostRegistrySignatureParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post registry signature params
func (o *PostRegistrySignatureParams) WithTimeout(timeout time.Duration) *PostRegistrySignatureParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post registry signature params
func (o *PostRegistrySignatureParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post registry signature params
func (o *PostRegistrySignatureParams) WithContext(ctx context.Context) *PostRegistrySignatureParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post registry signature params
func (o *PostRegistrySignatureParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post registry signature params
func (o *PostRegistrySignatureParams) WithHTTPClient(client *http.Client) *PostRegistrySignatureParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post registry signature params
func (o *PostRegistrySignatureParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the post registry signature params
func (o *PostRegistrySignatureParams) WithName(name string) *PostRegistrySignatureParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post registry signature params
func (o *PostRegistrySignatureParams) SetName(name string) {
	o.Name = name
}

// WithPublic adds the public to the post registry signature params
func (o *PostRegistrySignatureParams) WithPublic(public *bool) *PostRegistrySignatureParams {
	o.SetPublic(public)
	return o
}

// SetPublic adds the public to the post registry signature params
func (o *PostRegistrySignatureParams) SetPublic(public *bool) {
	o.Public = public
}

// WithSignature adds the signature to the post registry signature params
func (o *PostRegistrySignatureParams) WithSignature(signature runtime.NamedReadCloser) *PostRegistrySignatureParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the post registry signature params
func (o *PostRegistrySignatureParams) SetSignature(signature runtime.NamedReadCloser) {
	o.Signature = signature
}

// WithTag adds the tag to the post registry signature params
func (o *PostRegistrySignatureParams) WithTag(tag string) *PostRegistrySignatureParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the post registry signature params
func (o *PostRegistrySignatureParams) SetTag(tag string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *PostRegistrySignatureParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.Public != nil {

		// form param public
		var frPublic bool
		if o.Public != nil {
			frPublic = *o.Public
		}
		fPublic := swag.FormatBool(frPublic)
		if fPublic != "" {
			if err := r.SetFormParam("public", fPublic); err != nil {
				return err
			}
		}
	}
	// form file param signature
	if err := r.SetFileParam("signature", o.Signature); err != nil {
		return err
	}

	// form param tag
	frTag := o.Tag
	fTag := frTag
	if fTag != "" {
		if err := r.SetFormParam("tag", fTag); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
