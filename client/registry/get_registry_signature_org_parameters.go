/*
 	Copyright 2023 Loophole Labs

 	Licensed under the Apache License, Version 2.0 (the "License");
 	you may not use this file except in compliance with the License.
 	You may obtain a copy of the License at

 		   http://www.apache.org/licenses/LICENSE-2.0

 	Unless required by applicable law or agreed to in writing, software
 	distributed under the License is distributed on an "AS IS" BASIS,
 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 	See the License for the specific language governing permissions and
 	limitations under the License.
*/

// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRegistrySignatureOrgParams creates a new GetRegistrySignatureOrgParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRegistrySignatureOrgParams() *GetRegistrySignatureOrgParams {
	return &GetRegistrySignatureOrgParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRegistrySignatureOrgParamsWithTimeout creates a new GetRegistrySignatureOrgParams object
// with the ability to set a timeout on a request.
func NewGetRegistrySignatureOrgParamsWithTimeout(timeout time.Duration) *GetRegistrySignatureOrgParams {
	return &GetRegistrySignatureOrgParams{
		timeout: timeout,
	}
}

// NewGetRegistrySignatureOrgParamsWithContext creates a new GetRegistrySignatureOrgParams object
// with the ability to set a context for a request.
func NewGetRegistrySignatureOrgParamsWithContext(ctx context.Context) *GetRegistrySignatureOrgParams {
	return &GetRegistrySignatureOrgParams{
		Context: ctx,
	}
}

// NewGetRegistrySignatureOrgParamsWithHTTPClient creates a new GetRegistrySignatureOrgParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRegistrySignatureOrgParamsWithHTTPClient(client *http.Client) *GetRegistrySignatureOrgParams {
	return &GetRegistrySignatureOrgParams{
		HTTPClient: client,
	}
}

/*
GetRegistrySignatureOrgParams contains all the parameters to send to the API endpoint

	for the get registry signature org operation.

	Typically these are written to a http.Request.
*/
type GetRegistrySignatureOrgParams struct {

	/* Org.

	   org
	*/
	Org string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get registry signature org params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRegistrySignatureOrgParams) WithDefaults() *GetRegistrySignatureOrgParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get registry signature org params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRegistrySignatureOrgParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get registry signature org params
func (o *GetRegistrySignatureOrgParams) WithTimeout(timeout time.Duration) *GetRegistrySignatureOrgParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get registry signature org params
func (o *GetRegistrySignatureOrgParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get registry signature org params
func (o *GetRegistrySignatureOrgParams) WithContext(ctx context.Context) *GetRegistrySignatureOrgParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get registry signature org params
func (o *GetRegistrySignatureOrgParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get registry signature org params
func (o *GetRegistrySignatureOrgParams) WithHTTPClient(client *http.Client) *GetRegistrySignatureOrgParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get registry signature org params
func (o *GetRegistrySignatureOrgParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrg adds the org to the get registry signature org params
func (o *GetRegistrySignatureOrgParams) WithOrg(org string) *GetRegistrySignatureOrgParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the get registry signature org params
func (o *GetRegistrySignatureOrgParams) SetOrg(org string) {
	o.Org = org
}

// WriteToRequest writes these params to a swagger request
func (o *GetRegistrySignatureOrgParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param org
	if err := r.SetPathParam("org", o.Org); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
